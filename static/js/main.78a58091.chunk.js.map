{"version":3,"sources":["Api/Api.js","Api/AddressApi.js","Api/WeatherApi.js","Components/Weather/DailySummary.js","App.js","serviceWorker.js","index.js"],"names":["axios","axiosLib","create","xsrfCookieName","xsrfHeaderName","Api","client","arguments","length","undefined","Object","classCallCheck","this","api","params","get","then","res","status","data","ZipcodeApiSingleton","_Api","ZipcodeApi","possibleConstructorReturn","getPrototypeOf","apply","inherits","createClass","key","value","zipcode","concat","WeatherApiSingleton","WeatherApi","_this","call","getForecast","bind","assertThisInitialized","assign","appid","DailySummary","_ref","date","high","low","precipitation","react_default","a","createElement","className","defaultProps","hasPrecipitated","weather","indexOf","App","validateZipCode","state","forecast","e","_this2","currentTarget","setState","valid","AddressApi","error","_this3","zip","units","dailyForecast","list","reduce","forecasts","Date","dt","toDateString","Math","max","main","temp_max","min","temp_min","precipitated","_this4","class","onBlur","onClick","keys","map","Weather_DailySummary","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.78a58091.chunk.js","sourcesContent":["import axiosLib  from 'axios';\n\nconst axios = axiosLib.create({\n    xsrfCookieName: 'csrftoken',\n    xsrfHeaderName: 'X-CSRFToken',\n});\n\nexport default class Api {\n    constructor(client = axios) {\n        this.client = client;\n    }\n\n    get(api, params = {}) {\n        return this.client.get(api, params).then((res) => {\n            if (res.status >= 200 && res.status < 300 && res.data) {\n                return res.data;\n            }\n            return null;\n        });\n    }\n}\n","import Api from './Api';\n\nexport class ZipcodeApi extends Api {\n    get(zipcode) {\n        return this.client.get(`https://www.zippopotam.us/us/${zipcode}`).then((res) => {\n            return res;\n        });\n    }\n}\n\nconst ZipcodeApiSingleton = new ZipcodeApi();\n\nexport default ZipcodeApiSingleton;\n","import Api from './Api';\n\nconst token = '738e6280d357d83b38142be4626e0e3a';\n\nexport class WeatherApi extends Api {\n    constructor(client) {\n        super(client);\n\n        this.getForecast = this.getForecast.bind(this);\n    }\n    \n    getForecast(data) {\n        Object.assign(data, { appid: token });\n        return this.get('http://api.openweathermap.org/data/2.5/forecast/', { params: data }).then((res) => {\n            return res;\n        });\n    }\n}\n\nconst WeatherApiSingleton = new WeatherApi();\n\nexport default WeatherApiSingleton;\n","import React  from 'react';\nimport PropTypes                from 'prop-types';\n\nconst propTypes = {\n    high: PropTypes.number,\n    low: PropTypes.number,\n    precipitation: PropTypes.bool,\n};\n\nconst defaultProps = {\n    high: 0,\n    low: 0,\n    precipitation: false,\n};\n\nconst DailySummary = ({ date, high, low, precipitation }) => (\n    <div className=\"card\">\n        <label>{ date }</label>\n        <div>\n            <label>High:</label>\n            <span>{ high }</span>\n        </div>\n        <div>\n            <label>Low:</label>\n            <span>{ low }</span>\n        </div>\n        { precipitation ? <i className=\"fa fa-rain\" /> : null }\n    </div>\n)\n\nDailySummary.propTypes = propTypes;\nDailySummary.defaultProps = defaultProps;\n\nexport default DailySummary;\n","import React, { Component } from 'react';\nimport AddressApi           from './Api/AddressApi';\nimport WeatherApi           from './Api/WeatherApi';\nimport DailySummary         from './Components/Weather/DailySummary';\nimport './App.scss';\n\nconst hasPrecipitated = (weather) => ['Rain', 'Snow'].indexOf(weather) > -1;\n\nclass App extends Component {\n    constructor() {\n        super();\n\n        this.validateZipCode = this.validateZipCode.bind(this);\n        this.getForecast = this.getForecast.bind(this);\n\n        this.state = {\n            zipcode: {},\n            forecast: [],\n        };\n    }\n\n    validateZipCode(e) {\n        const zipcode = e.currentTarget.value;\n        this.setState({\n            zipcode: { value: zipcode, valid: true },\n        })\n\n        if (zipcode.length === 5 || zipcode.length === 9) {\n            AddressApi.get(zipcode).then(res => {}, error => {\n                this.setState({\n                    zipcode: Object.assign(this.state.zipcode, { valid: false })\n                })\n            })\n        }\n    }\n\n    getForecast() {\n        WeatherApi.getForecast({ zip: this.state.zipcode.value, units: 'imperial' }).then(res => {\n            const dailyForecast = res.list.reduce((forecasts, forecast) => {\n                const date = new Date(forecast.dt * 1000);\n                if (forecasts[date.toDateString()]) {\n                    forecasts[date.toDateString()] = {\n                        high: Math.max(forecasts[date.toDateString()].high, forecast.main.temp_max),\n                        low: Math.min(forecasts[date.toDateString()].low, forecast.main.temp_min),\n                        precipitated: forecasts[date.toDateString()].precipitated || hasPrecipitated(forecast.weather.main),\n                    }\n                } else {\n                    forecasts[date.toDateString()] = {\n                        high: forecast.main.temp_max,\n                        low: forecast.main.temp_min,\n                        precipitated: hasPrecipitated(forecast.weather.main),\n                    }\n                }\n                return forecasts;\n            }, {});\n            this.setState({ forecast: dailyForecast });\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"App container\">\n                <div class=\"input-group mb-3\">\n                    <input className=\"form-control\" onBlur={ this.validateZipCode } />\n                    <div class=\"input-group-append\">\n                        <button className=\"btn btn-primary\" onClick={ this.getForecast }>Submit</button>\n                    </div>\n                    { !this.state.zipcode.valid && this.state.zipcode.value ?\n                        <div className=\"\">This is not a valid US zipcode</div>\n                        : null\n                    }\n                </div>\n                <div className=\"row\">\n                    { Object.keys(this.state.forecast).map(date =>\n                        <div className=\"col-2\">\n                            <DailySummary date={ date } { ...this.state.forecast[date] } />\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}